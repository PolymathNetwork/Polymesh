version: 2
jobs:
  lint:
    docker:
      - image: maxsam4/rust
    environment:
      VERBOSE: "1"
    steps:
      - checkout
      - run:
          name: Check formatting
          command: ./scripts/rustfmt.sh
  build:
    docker:
      - image: maxsam4/rust
    environment:
      VERBOSE: "1"
    steps:
      - checkout
      - run:
          name: Store rust version in an environment var for cache key
          command: rustc --version > rust.version
      - restore_cache:
          keys:
            - v2-release-cache-{{ checksum "./rust.version" }}-{{ checksum "./pallets/runtime/Cargo.lock" }}-{{ checksum "./Cargo.lock" }}
            - v2-release-cache-{{ checksum "./rust.version" }}-{{ checksum "./pallets/runtime/Cargo.lock" }}
            - v2-release-cache-{{ checksum "./rust.version" }}
      - run:
          name: Build release
          command: cargo build -j 1 --release
          no_output_timeout: 4h
      - save_cache:
          key: v2-release-cache-{{ checksum "./rust.version" }}-{{ checksum "./pallets/runtime/Cargo.lock" }}-{{ checksum "./Cargo.lock" }}
          paths:
            - "~/.cargo"
            - "./target"
  test:
    docker:
      - image: maxsam4/rust
    environment:
      VERBOSE: "1"
    steps:
      - checkout
      - run:
          name: Store rust version in a file for cache key
          command: rustc --version > rust.version
      - restore_cache:
          keys:
            - v2-test-cache-{{ checksum "./rust.version" }}-{{ checksum "./pallets/runtime/Cargo.lock" }}
            - v2-test-cache-{{ checksum "./rust.version" }}
      - run:
          name: runtime tests
          command: cargo test
          working_directory: ./pallets/runtime
          no_output_timeout: 60m
      - save_cache:
          key: v2-test-cache-{{ checksum "./rust.version" }}-{{ checksum "./pallets/runtime/Cargo.lock" }}
          paths:
            - "~/.cargo"
            - "./pallets/runtime/target"
  cli:
    docker:
      - image: maxsam4/rust
    environment:
      VERBOSE: "1"
    steps:
      - checkout
      - run:
          name: Store rust version in a file for cache key
          command: rustc --version > rust.version
      - restore_cache:
          keys:
            - v2-cli-cache-{{ checksum "./rust.version" }}-{{ checksum "./pallets/runtime/Cargo.lock" }}-{{ checksum "./Cargo.lock" }}-{{ checksum "./scripts/cli/package-lock.json" }}
            - v2-cli-cache-{{ checksum "./rust.version" }}-{{ checksum "./pallets/runtime/Cargo.lock" }}-{{ checksum "./scripts/cli/package-lock.json" }}
            - v2-cli-cache-{{ checksum "./rust.version" }}-{{ checksum "./pallets/runtime/Cargo.lock" }}
            - v2-release-cache-{{ checksum "./rust.version" }}-{{ checksum "./pallets/runtime/Cargo.lock" }}-{{ checksum "./Cargo.lock" }}
            - v2-release-cache-{{ checksum "./rust.version" }}-{{ checksum "./pallets/runtime/Cargo.lock" }}
            - v2-cli-cache-{{ checksum "./rust.version" }}
            - v2-release-cache-{{ checksum "./rust.version" }}
      - run:
          name: Build release
          command: cargo build -j 1 --release
          no_output_timeout: 4h
      - run:
          name: cli node instance
          command: ./target/release/polymesh --dev --pool-limit 100000 -d /tmp/pmesh-primary-node
          background: true
      - run:
          name: cli scripts install
          command: npm install
          working_directory: ./scripts/cli
          no_output_timeout: 30m
      - run:
          name: cli scripts test
          command: npm test
          working_directory: ./scripts/cli
          no_output_timeout: 30m
      - save_cache:
          key: v2-cli-cache-{{ checksum "./rust.version" }}-{{ checksum "./pallets/runtime/Cargo.lock" }}-{{ checksum "./Cargo.lock" }}-{{ checksum "./scripts/cli/package-lock.json" }}
          paths:
            - "~/.cargo"
            - "./target"
            - "./scripts/cli/node_modules"
workflows:
  version: 2
  commit:
    jobs:
      - lint
      - test
      - cli
  daily-builds:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - build
